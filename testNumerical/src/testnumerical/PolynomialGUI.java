/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package testnumerical;

import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Frost
 */
public class PolynomialGUI extends javax.swing.JFrame {
/** Creates new form PolynomialGUI */
private ArrayList < String > terms = new ArrayList < String > ();
int[] powers;
String polynomial;
BigDecimal[] coefficients;
public int[] getPowers() {
    int[] powers = new int[terms.size()];
    for (int i = 0; i < terms.size(); i++) {
        String[] parts = terms.get(i).split("x\\^?");
        if (parts.length == 2) {
            powers[i] = Integer.parseInt(parts[1]);
        } else if (parts.length == 1) {
            if (terms.get(i).contains("x")) {
                powers[i] = 1;
            } else {
                powers[i] = 0;
            }
        }
    }
    return powers;
}

public BigDecimal[] getCoefficients() {
    BigDecimal[] coefficients = new BigDecimal[terms.size()];
    for (int i = 0; i < terms.size(); i++) {
        String[] parts = terms.get(i).split("x\\^?");
        if (parts.length == 2) {
            coefficients[i] = new BigDecimal(parts[0]).setScale(10, RoundingMode.HALF_UP).stripTrailingZeros();
        } else if (parts.length == 1) {
            coefficients[i] = new BigDecimal(parts[0]).setScale(10, RoundingMode.HALF_UP).stripTrailingZeros();
        }
    }
    return coefficients;
}
public String getPolynomial() {
    return polynomial;
}
    public PolynomialGUI() {
        initComponents();
        setVisible(true); // make the JFrame visible
        setTitle("Numerical Methods");
        setLocationRelativeTo(null);
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        polynomialLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        coeffField = new javax.swing.JTextField();
        powerField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        polynomialLabel1 = new javax.swing.JLabel();
        addButton1 = new javax.swing.JButton();
        submitButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Add Polynomial (REGULA FALSI)");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DEGREE:");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("COEFFICIENT:");

        polynomialLabel.setBackground(new java.awt.Color(255, 255, 255));
        polynomialLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        polynomialLabel.setForeground(new java.awt.Color(255, 255, 255));
        polynomialLabel.setText(" ");

        addButton.setBackground(new java.awt.Color(0, 0, 0));
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("ADD TERM");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        coeffField.setBackground(new java.awt.Color(255, 255, 255));
        coeffField.setForeground(new java.awt.Color(0, 0, 0));
        coeffField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coeffFieldActionPerformed(evt);
            }
        });

        powerField.setBackground(new java.awt.Color(255, 255, 255));
        powerField.setForeground(new java.awt.Color(0, 0, 0));
        powerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerFieldActionPerformed(evt);
            }
        });

        submitButton.setBackground(new java.awt.Color(0, 0, 0));
        submitButton.setForeground(new java.awt.Color(255, 255, 255));
        submitButton.setText("SUBMIT");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        polynomialLabel1.setBackground(new java.awt.Color(255, 255, 255));
        polynomialLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        polynomialLabel1.setForeground(new java.awt.Color(255, 255, 255));
        polynomialLabel1.setText("F(x) =");

        addButton1.setBackground(new java.awt.Color(0, 0, 0));
        addButton1.setForeground(new java.awt.Color(255, 255, 255));
        addButton1.setText("RESET");
        addButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButton1ActionPerformed(evt);
            }
        });

        submitButton1.setBackground(new java.awt.Color(0, 0, 0));
        submitButton1.setForeground(new java.awt.Color(255, 255, 255));
        submitButton1.setText("HOME");
        submitButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(26, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(polynomialLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(polynomialLabel))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(powerField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(coeffField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(addButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(addButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(submitButton))))
                        .addGap(0, 52, Short.MAX_VALUE)))
                .addContainerGap(292, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(submitButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(coeffField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(powerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(submitButton)
                    .addComponent(addButton1))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(polynomialLabel1)
                    .addComponent(polynomialLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(submitButton1)
                .addGap(15, 15, 15))
        );

        coeffField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                    powerField.requestFocus();
                }
            }
        });
        powerField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_UP) {

                    coeffField.requestFocus();
                } else if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    addButton.doClick();
                }
            }
        });
        // Allow user to navigate between text fields using up and down arrow keys
        // Allow user to press Enter to add term
        InputMap im = addButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap am = addButton.getActionMap();
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "clickButton");
        am.put("clickButton", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                addButton.doClick();
            }
        });

        // Allow user to navigate between text fields using up and down arrow keys

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void coeffFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coeffFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coeffFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
       coeffField.addKeyListener(new KeyAdapter() {
    @Override
    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();
        if (!Character.isDigit(c) && c != '.' && c != '-') {
            e.consume(); // Prevent non-numeric characters from being entered
        }
    }
});

powerField.addKeyListener(new KeyAdapter() {
    @Override
    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();
        if (!Character.isDigit(c)) {
            e.consume(); // Prevent non-integer characters from being entered
        }
    }
});

coeffField.requestFocus();

// Add term to ArrayList
BigDecimal coefficient = BigDecimal.ZERO;
try {
    coefficient = new BigDecimal(coeffField.getText());
    if (coefficient.scale() > 0) {
        JOptionPane.showMessageDialog(PolynomialGUI.this, "Coefficient cannot have a decimal.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(PolynomialGUI.this, "Invalid coefficient input.", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

int power = 0;
try {
    power = Integer.parseInt(powerField.getText());
    if (power < 0) {
        JOptionPane.showMessageDialog(PolynomialGUI.this, "Power cannot be negative.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(PolynomialGUI.this, "Invalid power input.", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

if (power == 0) {
    terms.add(coefficient.toString());
} else if (power == 1) {
    terms.add(coefficient + "x");
} else {
    terms.add(coefficient + "x^" + power);
}

// Store coefficients and powers in arrays

// Update polynomial label
StringBuilder sb = new StringBuilder("f(x) = ");
BigDecimal[] coeff=getCoefficients();
int[] deg=getPowers();
polynomial=createPolynomialString(coeff,deg);
polynomialLabel.setText(polynomial);

// Clear text fields and set focus on coeffField
coeffField.setText("");
powerField.setText("");
coeffField.requestFocus();

    }//GEN-LAST:event_addButtonActionPerformed
    
    //this is to create the polynomial expression of either the derive or the function representation itself
    public String createPolynomialString(BigDecimal[] coefficients, int[] degrees) {
      if (coefficients == null || degrees == null || coefficients.length != degrees.length) {
          throw new IllegalArgumentException("Coefficients and degrees arrays must have the same length and not be null");
      }

      StringBuilder polynomialString = new StringBuilder();
      boolean isFirstTerm = true;
      boolean hasNonzeroTerm = false;

      for (int i = 0; i < coefficients.length; i++) {
          BigDecimal coefficient = coefficients[i];
          int degree = degrees[i];

          if (coefficient.compareTo(BigDecimal.ZERO) == 0) {
              continue;
          }

          hasNonzeroTerm = true;

          if (!isFirstTerm && coefficient.compareTo(BigDecimal.ZERO) >= 0) {
              polynomialString.append(" + ");
          }

          if (coefficient.compareTo(BigDecimal.ZERO) < 0) {
              polynomialString.append("-");
              coefficient = coefficient.abs();
          }

          if (coefficient.compareTo(BigDecimal.ONE) != 0 || degree == 0) {
              polynomialString.append(coefficient.toPlainString());
          }

          if (degree > 0) {
              polynomialString.append("x");

              if (degree > 1) {
                  polynomialString.append("^").append(degree);
              }
          }

          isFirstTerm = false;
      }

      if (!hasNonzeroTerm) {
          polynomialString.append("0");
      }

      return polynomialString.toString();
  }
    private void powerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_powerFieldActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
   int[] degree = getPowers();
   BigDecimal[] coefficients = getCoefficients();

   InitialUpperLower upLow = new InitialUpperLower();
   upLow.autoPick(coefficients, degree);
   evaluateFx Fx = new evaluateFx();
   BigDecimal upper = upLow.getUpperBound();
   BigDecimal lower = upLow.getLowerBound();
   BigDecimal upperFx = Fx.ComputeFx(upper, coefficients, degree);
   BigDecimal lowerFx = Fx.ComputeFx(lower, coefficients, degree);
   if (upperFx.multiply(lowerFx).compareTo(new BigDecimal("0")) > 0) {
       JOptionPane.showMessageDialog(PolynomialGUI.this, "FUNCTION DOESNT HAVE A ROOT","Error",JOptionPane.ERROR_MESSAGE);
       return;
   }

   if (terms.isEmpty()) {
       JOptionPane.showMessageDialog(PolynomialGUI.this, "Polynomial must have at least one term.", "Error", JOptionPane.ERROR_MESSAGE);
       return;
   }

   coefficients = getCoefficients();
   degree = getPowers();
   String terms = getPolynomial();

   // Print coefficients and powers to console
   for (int i = 0; i < coefficients.length; i++) {
       //  System.out.println("Coefficient for x^" + powers[i] + " = " + coefficients[i]);
       System.out.println("Coefficient i=" + coefficients[i]);
       System.out.println("Degree i= " + degree[i]);

   }
   setVisible(false);
   InitialBounds upLow1 = new InitialBounds(terms, coefficients, degree);
    }//GEN-LAST:event_submitButtonActionPerformed

    private void addButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButton1ActionPerformed
        // TODO add your handling code here:
              // Clear fields and reset state
        coeffField.setText("");
        powerField.setText("");
        terms.clear();
        polynomialLabel.setText("");
        // Set focus on coeffField
        coeffField.requestFocus();
    }//GEN-LAST:event_addButton1ActionPerformed

    private void submitButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton1ActionPerformed
        // TODO add your handling code here
            dispose();
            homePage home=new homePage();
    }//GEN-LAST:event_submitButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PolynomialGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PolynomialGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PolynomialGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PolynomialGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PolynomialGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addButton1;
    private javax.swing.JTextField coeffField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel polynomialLabel;
    private javax.swing.JLabel polynomialLabel1;
    private javax.swing.JTextField powerField;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton submitButton1;
    // End of variables declaration//GEN-END:variables

}
